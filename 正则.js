/**
 * 正则基本规则
 * 1. / content /
 * 2. [ ] 能够匹配多个字符
 * 3. {min, max} 表示字符个数; ? -> 0/1; * -> 0/~; + -> 1/~
 * 4. \b 表示字符边界；\B 表示非单词边界 /\bcat\b/ 表示匹配cat单词，而包含cat的字符不会被匹配到 
 * 5. 字符串边界 ^ 表示要匹配的字符串以^后的字符开头 $用来匹配字符串的结尾
 * 6. m 表示匹配多行; i 表示忽略大小写; g 表示全局匹配
 * 
 * 7. 子表达式 使用分组、回溯引用、逻辑处理 能构造出复杂的正则表达式
 *      分组：() 中的内容为一组 每个分组都是一个子表达式 要结合回溯引用才能发挥较大作用
 *      回溯引用：指模式的后面引用前面已经匹配了的子字符串；回溯引用的语法像\1,\2,....,其中\1表示引用的第一个子表达式，\2表示引用的第二个子表达式，以此类推。而\0则表示整个表达式
 */

 let res = /\/group\/\d+/
 let res2 = /\/group\/$/
 console.log(res.test('api/group/'))
 console.log(res2.test('api/group/'))
 console.log(res.test('api/group/1/'))
 console.log(res2.test('api/group/1/'))